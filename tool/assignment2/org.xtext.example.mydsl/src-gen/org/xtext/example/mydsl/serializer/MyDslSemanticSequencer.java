/*
 * generated by Xtext 2.33.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;
import pt.isep.enorm.atb.cr2.Automatic;
import pt.isep.enorm.atb.cr2.Comment;
import pt.isep.enorm.atb.cr2.Cr2Package;
import pt.isep.enorm.atb.cr2.End;
import pt.isep.enorm.atb.cr2.Feature;
import pt.isep.enorm.atb.cr2.Manual;
import pt.isep.enorm.atb.cr2.Model;
import pt.isep.enorm.atb.cr2.ModerationProcess;
import pt.isep.enorm.atb.cr2.Review;
import pt.isep.enorm.atb.cr2.Subject;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == Cr2Package.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case Cr2Package.AUTOMATIC:
				sequence_Automatic(context, (Automatic) semanticObject); 
				return; 
			case Cr2Package.COMMENT:
				sequence_Comment(context, (Comment) semanticObject); 
				return; 
			case Cr2Package.END:
				sequence_End(context, (End) semanticObject); 
				return; 
			case Cr2Package.FEATURE:
				sequence_Feature(context, (Feature) semanticObject); 
				return; 
			case Cr2Package.MANUAL:
				sequence_Manual(context, (Manual) semanticObject); 
				return; 
			case Cr2Package.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case Cr2Package.MODERATION_PROCESS:
				sequence_ModerationProcess(context, (ModerationProcess) semanticObject); 
				return; 
			case Cr2Package.REVIEW:
				sequence_Review(context, (Review) semanticObject); 
				return; 
			case Cr2Package.SUBJECT:
				sequence_Subject(context, (Subject) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Step returns Automatic
	 *     ValidationStep returns Automatic
	 *     Automatic returns Automatic
	 *
	 * Constraint:
	 *     (name=EString method=EString? nextApprove=[Step|EString] nextReject=[Step|EString])
	 * </pre>
	 */
	protected void sequence_Automatic(ISerializationContext context, Automatic semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UserFeedback returns Comment
	 *     Comment returns Comment
	 *
	 * Constraint:
	 *     (reply?='reply' moderation?='moderation' name=EString commentType=CommentType? moderationProcess=ModerationProcess?)
	 * </pre>
	 */
	protected void sequence_Comment(ISerializationContext context, Comment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Step returns End
	 *     End returns End
	 *
	 * Constraint:
	 *     name=EString
	 * </pre>
	 */
	protected void sequence_End(ISerializationContext context, End semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Cr2Package.Literals.STEP__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Cr2Package.Literals.STEP__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEndAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Feature returns Feature
	 *
	 * Constraint:
	 *     name=EString
	 * </pre>
	 */
	protected void sequence_Feature(ISerializationContext context, Feature semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Cr2Package.Literals.FEATURE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Cr2Package.Literals.FEATURE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFeatureAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Step returns Manual
	 *     ValidationStep returns Manual
	 *     Manual returns Manual
	 *
	 * Constraint:
	 *     (name=EString nextApprove=[Step|EString] nextReject=[Step|EString])
	 * </pre>
	 */
	protected void sequence_Manual(ISerializationContext context, Manual semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Cr2Package.Literals.STEP__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Cr2Package.Literals.STEP__NAME));
			if (transientValues.isValueTransient(semanticObject, Cr2Package.Literals.VALIDATION_STEP__NEXT_APPROVE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Cr2Package.Literals.VALIDATION_STEP__NEXT_APPROVE));
			if (transientValues.isValueTransient(semanticObject, Cr2Package.Literals.VALIDATION_STEP__NEXT_REJECT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Cr2Package.Literals.VALIDATION_STEP__NEXT_REJECT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getManualAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getManualAccess().getNextApproveStepEStringParserRuleCall_4_0_1(), semanticObject.eGet(Cr2Package.Literals.VALIDATION_STEP__NEXT_APPROVE, false));
		feeder.accept(grammarAccess.getManualAccess().getNextRejectStepEStringParserRuleCall_6_0_1(), semanticObject.eGet(Cr2Package.Literals.VALIDATION_STEP__NEXT_REJECT, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (name=EString subject=Subject)
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Cr2Package.Literals.MODEL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Cr2Package.Literals.MODEL__NAME));
			if (transientValues.isValueTransient(semanticObject, Cr2Package.Literals.MODEL__SUBJECT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Cr2Package.Literals.MODEL__SUBJECT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getModelAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getModelAccess().getSubjectSubjectParserRuleCall_4_0(), semanticObject.getSubject());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ModerationProcess returns ModerationProcess
	 *
	 * Constraint:
	 *     (name=EString startStep=[ValidationStep|EString] (step+=Step step+=Step*)?)
	 * </pre>
	 */
	protected void sequence_ModerationProcess(ISerializationContext context, ModerationProcess semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     UserFeedback returns Review
	 *     Review returns Review
	 *
	 * Constraint:
	 *     (name=EString gradeType=GradeType? reviewType=ReviewType?)
	 * </pre>
	 */
	protected void sequence_Review(ISerializationContext context, Review semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Subject returns Subject
	 *
	 * Constraint:
	 *     (name=EString userFeedback+=UserFeedback userFeedback+=UserFeedback* (feature+=Feature feature+=Feature*)?)
	 * </pre>
	 */
	protected void sequence_Subject(ISerializationContext context, Subject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
