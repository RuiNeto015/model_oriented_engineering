/*
 * generated by Xtext 2.33.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class Assign4GrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Assign4.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cNameKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSubjectKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cNameKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSubjectAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSubjectSubjectParserRuleCall_5_0 = (RuleCall)cSubjectAssignment_5.eContents().get(0);
		
		//Model returns Model:
		//    'Model' 'name:' name=EString
		//    'Subject' 'name:' subject=Subject;
		@Override public ParserRule getRule() { return rule; }
		
		//'Model' 'name:' name=EString
		//'Subject' 'name:' subject=Subject
		public Group getGroup() { return cGroup; }
		
		//'Model'
		public Keyword getModelKeyword_0() { return cModelKeyword_0; }
		
		//'name:'
		public Keyword getNameKeyword_1() { return cNameKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'Subject'
		public Keyword getSubjectKeyword_3() { return cSubjectKeyword_3; }
		
		//'name:'
		public Keyword getNameKeyword_4() { return cNameKeyword_4; }
		
		//subject=Subject
		public Assignment getSubjectAssignment_5() { return cSubjectAssignment_5; }
		
		//Subject
		public RuleCall getSubjectSubjectParserRuleCall_5_0() { return cSubjectSubjectParserRuleCall_5_0; }
	}
	public class UserFeedbackElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Assign4.UserFeedback");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cReviewParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCommentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UserFeedback returns UserFeedback:
		//    Review | Comment;
		@Override public ParserRule getRule() { return rule; }
		
		//Review | Comment
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Review
		public RuleCall getReviewParserRuleCall_0() { return cReviewParserRuleCall_0; }
		
		//Comment
		public RuleCall getCommentParserRuleCall_1() { return cCommentParserRuleCall_1; }
	}
	public class StepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Assign4.Step");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEndParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAutomaticParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cManualParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Step returns Step:
		//    End | Automatic | Manual;
		@Override public ParserRule getRule() { return rule; }
		
		//End | Automatic | Manual
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//End
		public RuleCall getEndParserRuleCall_0() { return cEndParserRuleCall_0; }
		
		//Automatic
		public RuleCall getAutomaticParserRuleCall_1() { return cAutomaticParserRuleCall_1; }
		
		//Manual
		public RuleCall getManualParserRuleCall_2() { return cManualParserRuleCall_2; }
	}
	public class ValidationStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Assign4.ValidationStep");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAutomaticParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cManualParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ValidationStep returns ValidationStep:
		//    Automatic | Manual;
		@Override public ParserRule getRule() { return rule; }
		
		//Automatic | Manual
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Automatic
		public RuleCall getAutomaticParserRuleCall_0() { return cAutomaticParserRuleCall_0; }
		
		//Manual
		public RuleCall getManualParserRuleCall_1() { return cManualParserRuleCall_1; }
	}
	public class SubjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Assign4.Subject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cSubjectKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cHasKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFeaturesKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFeatureAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFeatureFeatureParserRuleCall_3_1_0 = (RuleCall)cFeatureAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cFeatureAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cFeatureFeatureParserRuleCall_3_2_1_0 = (RuleCall)cFeatureAssignment_3_2_1.eContents().get(0);
		private final Keyword cUserKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cFeedbackKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cUserFeedbackAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cUserFeedbackUserFeedbackParserRuleCall_6_0 = (RuleCall)cUserFeedbackAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cUserFeedbackAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cUserFeedbackUserFeedbackParserRuleCall_7_1_0 = (RuleCall)cUserFeedbackAssignment_7_1.eContents().get(0);
		
		//Subject returns Subject:
		//    name=EString
		//    'Subject' 'has:'
		//        ('Features:' feature+=Feature ( "," feature+=Feature)* )?
		//        'User' 'feedback:' userFeedback+=UserFeedback ( "," userFeedback+=UserFeedback )*;
		@Override public ParserRule getRule() { return rule; }
		
		//name=EString
		//'Subject' 'has:'
		//    ('Features:' feature+=Feature ( "," feature+=Feature)* )?
		//    'User' 'feedback:' userFeedback+=UserFeedback ( "," userFeedback+=UserFeedback )*
		public Group getGroup() { return cGroup; }
		
		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }
		
		//'Subject'
		public Keyword getSubjectKeyword_1() { return cSubjectKeyword_1; }
		
		//'has:'
		public Keyword getHasKeyword_2() { return cHasKeyword_2; }
		
		//('Features:' feature+=Feature ( "," feature+=Feature)* )?
		public Group getGroup_3() { return cGroup_3; }
		
		//'Features:'
		public Keyword getFeaturesKeyword_3_0() { return cFeaturesKeyword_3_0; }
		
		//feature+=Feature
		public Assignment getFeatureAssignment_3_1() { return cFeatureAssignment_3_1; }
		
		//Feature
		public RuleCall getFeatureFeatureParserRuleCall_3_1_0() { return cFeatureFeatureParserRuleCall_3_1_0; }
		
		//( "," feature+=Feature)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//feature+=Feature
		public Assignment getFeatureAssignment_3_2_1() { return cFeatureAssignment_3_2_1; }
		
		//Feature
		public RuleCall getFeatureFeatureParserRuleCall_3_2_1_0() { return cFeatureFeatureParserRuleCall_3_2_1_0; }
		
		//'User'
		public Keyword getUserKeyword_4() { return cUserKeyword_4; }
		
		//'feedback:'
		public Keyword getFeedbackKeyword_5() { return cFeedbackKeyword_5; }
		
		//userFeedback+=UserFeedback
		public Assignment getUserFeedbackAssignment_6() { return cUserFeedbackAssignment_6; }
		
		//UserFeedback
		public RuleCall getUserFeedbackUserFeedbackParserRuleCall_6_0() { return cUserFeedbackUserFeedbackParserRuleCall_6_0; }
		
		//( "," userFeedback+=UserFeedback )*
		public Group getGroup_7() { return cGroup_7; }
		
		//","
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//userFeedback+=UserFeedback
		public Assignment getUserFeedbackAssignment_7_1() { return cUserFeedbackAssignment_7_1; }
		
		//UserFeedback
		public RuleCall getUserFeedbackUserFeedbackParserRuleCall_7_1_0() { return cUserFeedbackUserFeedbackParserRuleCall_7_1_0; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Assign4.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Assign4.Feature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFeatureAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Feature returns Feature:
		//    {Feature}
		//    name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{Feature}
		//name=EString
		public Group getGroup() { return cGroup; }
		
		//{Feature}
		public Action getFeatureAction_0() { return cFeatureAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}
	public class ReviewElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Assign4.Review");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReviewAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReviewKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cGradeTypeKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cGradeTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cGradeTypeGradeTypeEnumRuleCall_4_1_0 = (RuleCall)cGradeTypeAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cReviewTypeKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cReviewTypeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cReviewTypeReviewTypeEnumRuleCall_5_1_0 = (RuleCall)cReviewTypeAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Review returns Review:
		//    {Review}
		//    'Review'
		//    name=EString
		//    '{'
		//        ('gradeType' gradeType=GradeType)?
		//        ('reviewType' reviewType=ReviewType)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Review}
		//'Review'
		//name=EString
		//'{'
		//    ('gradeType' gradeType=GradeType)?
		//    ('reviewType' reviewType=ReviewType)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Review}
		public Action getReviewAction_0() { return cReviewAction_0; }
		
		//'Review'
		public Keyword getReviewKeyword_1() { return cReviewKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('gradeType' gradeType=GradeType)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'gradeType'
		public Keyword getGradeTypeKeyword_4_0() { return cGradeTypeKeyword_4_0; }
		
		//gradeType=GradeType
		public Assignment getGradeTypeAssignment_4_1() { return cGradeTypeAssignment_4_1; }
		
		//GradeType
		public RuleCall getGradeTypeGradeTypeEnumRuleCall_4_1_0() { return cGradeTypeGradeTypeEnumRuleCall_4_1_0; }
		
		//('reviewType' reviewType=ReviewType)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'reviewType'
		public Keyword getReviewTypeKeyword_5_0() { return cReviewTypeKeyword_5_0; }
		
		//reviewType=ReviewType
		public Assignment getReviewTypeAssignment_5_1() { return cReviewTypeAssignment_5_1; }
		
		//ReviewType
		public RuleCall getReviewTypeReviewTypeEnumRuleCall_5_1_0() { return cReviewTypeReviewTypeEnumRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class CommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Assign4.Comment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cNameKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cReplyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cReplyReplyKeyword_4_0 = (Keyword)cReplyAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cModerationAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Keyword cModerationModerationKeyword_6_0 = (Keyword)cModerationAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCommentKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cTypeKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cCommentTypeAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cCommentTypeCommentTypeEnumRuleCall_8_2_0 = (RuleCall)cCommentTypeAssignment_8_2.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cModerationKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cProcessKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Keyword cNameKeyword_9_2 = (Keyword)cGroup_9.eContents().get(2);
		private final Assignment cModerationProcessAssignment_9_3 = (Assignment)cGroup_9.eContents().get(3);
		private final RuleCall cModerationProcessModerationProcessParserRuleCall_9_3_0 = (RuleCall)cModerationProcessAssignment_9_3.eContents().get(0);
		
		//Comment returns Comment:
		//    'Comment' 'name:' name=EString
		//        '('reply?='reply'','moderation?='moderation'')'
		//        ('Comment' 'Type:' commentType=CommentType)?
		//        ('Moderation' 'Process' 'Name:' moderationProcess=ModerationProcess)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Comment' 'name:' name=EString
		//    '('reply?='reply'','moderation?='moderation'')'
		//    ('Comment' 'Type:' commentType=CommentType)?
		//    ('Moderation' 'Process' 'Name:' moderationProcess=ModerationProcess)?
		public Group getGroup() { return cGroup; }
		
		//'Comment'
		public Keyword getCommentKeyword_0() { return cCommentKeyword_0; }
		
		//'name:'
		public Keyword getNameKeyword_1() { return cNameKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//reply?='reply'
		public Assignment getReplyAssignment_4() { return cReplyAssignment_4; }
		
		//'reply'
		public Keyword getReplyReplyKeyword_4_0() { return cReplyReplyKeyword_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//moderation?='moderation'
		public Assignment getModerationAssignment_6() { return cModerationAssignment_6; }
		
		//'moderation'
		public Keyword getModerationModerationKeyword_6_0() { return cModerationModerationKeyword_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//('Comment' 'Type:' commentType=CommentType)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'Comment'
		public Keyword getCommentKeyword_8_0() { return cCommentKeyword_8_0; }
		
		//'Type:'
		public Keyword getTypeKeyword_8_1() { return cTypeKeyword_8_1; }
		
		//commentType=CommentType
		public Assignment getCommentTypeAssignment_8_2() { return cCommentTypeAssignment_8_2; }
		
		//CommentType
		public RuleCall getCommentTypeCommentTypeEnumRuleCall_8_2_0() { return cCommentTypeCommentTypeEnumRuleCall_8_2_0; }
		
		//('Moderation' 'Process' 'Name:' moderationProcess=ModerationProcess)?
		public Group getGroup_9() { return cGroup_9; }
		
		//'Moderation'
		public Keyword getModerationKeyword_9_0() { return cModerationKeyword_9_0; }
		
		//'Process'
		public Keyword getProcessKeyword_9_1() { return cProcessKeyword_9_1; }
		
		//'Name:'
		public Keyword getNameKeyword_9_2() { return cNameKeyword_9_2; }
		
		//moderationProcess=ModerationProcess
		public Assignment getModerationProcessAssignment_9_3() { return cModerationProcessAssignment_9_3; }
		
		//ModerationProcess
		public RuleCall getModerationProcessModerationProcessParserRuleCall_9_3_0() { return cModerationProcessModerationProcessParserRuleCall_9_3_0; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Assign4.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//    'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class ModerationProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Assign4.ModerationProcess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cStepsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cStartKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cStepKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStartStepAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cStartStepValidationStepCrossReference_4_0 = (CrossReference)cStartStepAssignment_4.eContents().get(0);
		private final RuleCall cStartStepValidationStepEStringParserRuleCall_4_0_1 = (RuleCall)cStartStepValidationStepCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cStepAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cStepStepParserRuleCall_5_0_0 = (RuleCall)cStepAssignment_5_0.eContents().get(0);
		private final Assignment cStepAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cStepStepParserRuleCall_5_1_0 = (RuleCall)cStepAssignment_5_1.eContents().get(0);
		
		//ModerationProcess returns ModerationProcess:
		//    name=EString
		//    'Steps:'
		//        'Start' 'Step:' startStep=[ValidationStep|EString]
		//        ( step+=Step ( step+=Step)* )?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=EString
		//'Steps:'
		//    'Start' 'Step:' startStep=[ValidationStep|EString]
		//    ( step+=Step ( step+=Step)* )?
		public Group getGroup() { return cGroup; }
		
		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }
		
		//'Steps:'
		public Keyword getStepsKeyword_1() { return cStepsKeyword_1; }
		
		//'Start'
		public Keyword getStartKeyword_2() { return cStartKeyword_2; }
		
		//'Step:'
		public Keyword getStepKeyword_3() { return cStepKeyword_3; }
		
		//startStep=[ValidationStep|EString]
		public Assignment getStartStepAssignment_4() { return cStartStepAssignment_4; }
		
		//[ValidationStep|EString]
		public CrossReference getStartStepValidationStepCrossReference_4_0() { return cStartStepValidationStepCrossReference_4_0; }
		
		//EString
		public RuleCall getStartStepValidationStepEStringParserRuleCall_4_0_1() { return cStartStepValidationStepEStringParserRuleCall_4_0_1; }
		
		//( step+=Step ( step+=Step)* )?
		public Group getGroup_5() { return cGroup_5; }
		
		//step+=Step
		public Assignment getStepAssignment_5_0() { return cStepAssignment_5_0; }
		
		//Step
		public RuleCall getStepStepParserRuleCall_5_0_0() { return cStepStepParserRuleCall_5_0_0; }
		
		//( step+=Step)*
		public Assignment getStepAssignment_5_1() { return cStepAssignment_5_1; }
		
		//Step
		public RuleCall getStepStepParserRuleCall_5_1_0() { return cStepStepParserRuleCall_5_1_0; }
	}
	public class EndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Assign4.End");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEndAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEndKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cStepKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//End returns End:
		//    {End}
		//    'End' 'Step:'
		//    name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{End}
		//'End' 'Step:'
		//name=EString
		public Group getGroup() { return cGroup; }
		
		//{End}
		public Action getEndAction_0() { return cEndAction_0; }
		
		//'End'
		public Keyword getEndKeyword_1() { return cEndKeyword_1; }
		
		//'Step:'
		public Keyword getStepKeyword_2() { return cStepKeyword_2; }
		
		//name=EString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_3_0() { return cNameEStringParserRuleCall_3_0; }
	}
	public class AutomaticElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Assign4.Automatic");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAutomaticKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cStepKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cMethodKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cMethodAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cMethodEStringParserRuleCall_4_1_0 = (RuleCall)cMethodAssignment_4_1.eContents().get(0);
		private final Keyword cIfKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cApprovedKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cJumpKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cToKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cNextApproveAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final CrossReference cNextApproveStepCrossReference_9_0 = (CrossReference)cNextApproveAssignment_9.eContents().get(0);
		private final RuleCall cNextApproveStepEStringParserRuleCall_9_0_1 = (RuleCall)cNextApproveStepCrossReference_9_0.eContents().get(1);
		private final Keyword cIfKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cRejectedKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cJumpKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Keyword cToKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Assignment cNextRejectAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final CrossReference cNextRejectStepCrossReference_14_0 = (CrossReference)cNextRejectAssignment_14.eContents().get(0);
		private final RuleCall cNextRejectStepEStringParserRuleCall_14_0_1 = (RuleCall)cNextRejectStepCrossReference_14_0.eContents().get(1);
		
		//Automatic returns Automatic:
		//    'Automatic' 'Step' 'Name:' name=EString
		//        ('Method:' method=EString)?
		//        'If' 'approved' 'jump' 'to:' nextApprove=[Step|EString]
		//        'If' 'rejected' 'jump' 'to:' nextReject=[Step|EString];
		@Override public ParserRule getRule() { return rule; }
		
		//'Automatic' 'Step' 'Name:' name=EString
		//    ('Method:' method=EString)?
		//    'If' 'approved' 'jump' 'to:' nextApprove=[Step|EString]
		//    'If' 'rejected' 'jump' 'to:' nextReject=[Step|EString]
		public Group getGroup() { return cGroup; }
		
		//'Automatic'
		public Keyword getAutomaticKeyword_0() { return cAutomaticKeyword_0; }
		
		//'Step'
		public Keyword getStepKeyword_1() { return cStepKeyword_1; }
		
		//'Name:'
		public Keyword getNameKeyword_2() { return cNameKeyword_2; }
		
		//name=EString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_3_0() { return cNameEStringParserRuleCall_3_0; }
		
		//('Method:' method=EString)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'Method:'
		public Keyword getMethodKeyword_4_0() { return cMethodKeyword_4_0; }
		
		//method=EString
		public Assignment getMethodAssignment_4_1() { return cMethodAssignment_4_1; }
		
		//EString
		public RuleCall getMethodEStringParserRuleCall_4_1_0() { return cMethodEStringParserRuleCall_4_1_0; }
		
		//'If'
		public Keyword getIfKeyword_5() { return cIfKeyword_5; }
		
		//'approved'
		public Keyword getApprovedKeyword_6() { return cApprovedKeyword_6; }
		
		//'jump'
		public Keyword getJumpKeyword_7() { return cJumpKeyword_7; }
		
		//'to:'
		public Keyword getToKeyword_8() { return cToKeyword_8; }
		
		//nextApprove=[Step|EString]
		public Assignment getNextApproveAssignment_9() { return cNextApproveAssignment_9; }
		
		//[Step|EString]
		public CrossReference getNextApproveStepCrossReference_9_0() { return cNextApproveStepCrossReference_9_0; }
		
		//EString
		public RuleCall getNextApproveStepEStringParserRuleCall_9_0_1() { return cNextApproveStepEStringParserRuleCall_9_0_1; }
		
		//'If'
		public Keyword getIfKeyword_10() { return cIfKeyword_10; }
		
		//'rejected'
		public Keyword getRejectedKeyword_11() { return cRejectedKeyword_11; }
		
		//'jump'
		public Keyword getJumpKeyword_12() { return cJumpKeyword_12; }
		
		//'to:'
		public Keyword getToKeyword_13() { return cToKeyword_13; }
		
		//nextReject=[Step|EString]
		public Assignment getNextRejectAssignment_14() { return cNextRejectAssignment_14; }
		
		//[Step|EString]
		public CrossReference getNextRejectStepCrossReference_14_0() { return cNextRejectStepCrossReference_14_0; }
		
		//EString
		public RuleCall getNextRejectStepEStringParserRuleCall_14_0_1() { return cNextRejectStepEStringParserRuleCall_14_0_1; }
	}
	public class ManualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Assign4.Manual");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cManualKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cStepKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cIfKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cApprovedKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cJumpKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cToKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cNextApproveAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cNextApproveStepCrossReference_8_0 = (CrossReference)cNextApproveAssignment_8.eContents().get(0);
		private final RuleCall cNextApproveStepEStringParserRuleCall_8_0_1 = (RuleCall)cNextApproveStepCrossReference_8_0.eContents().get(1);
		private final Keyword cIfKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cRejectedKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cJumpKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cToKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cNextRejectAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final CrossReference cNextRejectStepCrossReference_13_0 = (CrossReference)cNextRejectAssignment_13.eContents().get(0);
		private final RuleCall cNextRejectStepEStringParserRuleCall_13_0_1 = (RuleCall)cNextRejectStepCrossReference_13_0.eContents().get(1);
		
		//Manual returns Manual:
		//    'Manual' 'Step' 'Name:' name=EString
		//        'If' 'approved' 'jump' 'to:' nextApprove=[Step|EString]
		//        'If' 'rejected' 'jump' 'to:' nextReject=[Step|EString];
		@Override public ParserRule getRule() { return rule; }
		
		//'Manual' 'Step' 'Name:' name=EString
		//    'If' 'approved' 'jump' 'to:' nextApprove=[Step|EString]
		//    'If' 'rejected' 'jump' 'to:' nextReject=[Step|EString]
		public Group getGroup() { return cGroup; }
		
		//'Manual'
		public Keyword getManualKeyword_0() { return cManualKeyword_0; }
		
		//'Step'
		public Keyword getStepKeyword_1() { return cStepKeyword_1; }
		
		//'Name:'
		public Keyword getNameKeyword_2() { return cNameKeyword_2; }
		
		//name=EString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_3_0() { return cNameEStringParserRuleCall_3_0; }
		
		//'If'
		public Keyword getIfKeyword_4() { return cIfKeyword_4; }
		
		//'approved'
		public Keyword getApprovedKeyword_5() { return cApprovedKeyword_5; }
		
		//'jump'
		public Keyword getJumpKeyword_6() { return cJumpKeyword_6; }
		
		//'to:'
		public Keyword getToKeyword_7() { return cToKeyword_7; }
		
		//nextApprove=[Step|EString]
		public Assignment getNextApproveAssignment_8() { return cNextApproveAssignment_8; }
		
		//[Step|EString]
		public CrossReference getNextApproveStepCrossReference_8_0() { return cNextApproveStepCrossReference_8_0; }
		
		//EString
		public RuleCall getNextApproveStepEStringParserRuleCall_8_0_1() { return cNextApproveStepEStringParserRuleCall_8_0_1; }
		
		//'If'
		public Keyword getIfKeyword_9() { return cIfKeyword_9; }
		
		//'rejected'
		public Keyword getRejectedKeyword_10() { return cRejectedKeyword_10; }
		
		//'jump'
		public Keyword getJumpKeyword_11() { return cJumpKeyword_11; }
		
		//'to:'
		public Keyword getToKeyword_12() { return cToKeyword_12; }
		
		//nextReject=[Step|EString]
		public Assignment getNextRejectAssignment_13() { return cNextRejectAssignment_13; }
		
		//[Step|EString]
		public CrossReference getNextRejectStepCrossReference_13_0() { return cNextRejectStepCrossReference_13_0; }
		
		//EString
		public RuleCall getNextRejectStepEStringParserRuleCall_13_0_1() { return cNextRejectStepEStringParserRuleCall_13_0_1; }
	}
	
	public class GradeTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Assign4.GradeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCUSTOMEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCUSTOMCUSTOMKeyword_0_0 = (Keyword)cCUSTOMEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSTARSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSTARSSTARSKeyword_1_0 = (Keyword)cSTARSEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum GradeType returns GradeType:
		//                CUSTOM = 'CUSTOM' | STARS = 'STARS';
		public EnumRule getRule() { return rule; }
		
		//CUSTOM = 'CUSTOM' | STARS = 'STARS'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CUSTOM = 'CUSTOM'
		public EnumLiteralDeclaration getCUSTOMEnumLiteralDeclaration_0() { return cCUSTOMEnumLiteralDeclaration_0; }
		
		//'CUSTOM'
		public Keyword getCUSTOMCUSTOMKeyword_0_0() { return cCUSTOMCUSTOMKeyword_0_0; }
		
		//STARS = 'STARS'
		public EnumLiteralDeclaration getSTARSEnumLiteralDeclaration_1() { return cSTARSEnumLiteralDeclaration_1; }
		
		//'STARS'
		public Keyword getSTARSSTARSKeyword_1_0() { return cSTARSSTARSKeyword_1_0; }
	}
	public class ReviewTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Assign4.ReviewType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cONLYGRADEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cONLYGRADEONLYGRADEKeyword_0_0 = (Keyword)cONLYGRADEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cANNOTATEDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cANNOTATEDANNOTATEDKeyword_1_0 = (Keyword)cANNOTATEDEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ReviewType returns ReviewType:
		//                ONLYGRADE = 'ONLYGRADE' | ANNOTATED = 'ANNOTATED';
		public EnumRule getRule() { return rule; }
		
		//ONLYGRADE = 'ONLYGRADE' | ANNOTATED = 'ANNOTATED'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ONLYGRADE = 'ONLYGRADE'
		public EnumLiteralDeclaration getONLYGRADEEnumLiteralDeclaration_0() { return cONLYGRADEEnumLiteralDeclaration_0; }
		
		//'ONLYGRADE'
		public Keyword getONLYGRADEONLYGRADEKeyword_0_0() { return cONLYGRADEONLYGRADEKeyword_0_0; }
		
		//ANNOTATED = 'ANNOTATED'
		public EnumLiteralDeclaration getANNOTATEDEnumLiteralDeclaration_1() { return cANNOTATEDEnumLiteralDeclaration_1; }
		
		//'ANNOTATED'
		public Keyword getANNOTATEDANNOTATEDKeyword_1_0() { return cANNOTATEDANNOTATEDKeyword_1_0; }
	}
	public class CommentTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Assign4.CommentType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSIMPLEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSIMPLESIMPLEKeyword_0_0 = (Keyword)cSIMPLEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRICHTEXTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRICHTEXTRICHTEXTKeyword_1_0 = (Keyword)cRICHTEXTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum CommentType returns CommentType:
		//                SIMPLE = 'SIMPLE' | RICHTEXT = 'RICHTEXT';
		public EnumRule getRule() { return rule; }
		
		//SIMPLE = 'SIMPLE' | RICHTEXT = 'RICHTEXT'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SIMPLE = 'SIMPLE'
		public EnumLiteralDeclaration getSIMPLEEnumLiteralDeclaration_0() { return cSIMPLEEnumLiteralDeclaration_0; }
		
		//'SIMPLE'
		public Keyword getSIMPLESIMPLEKeyword_0_0() { return cSIMPLESIMPLEKeyword_0_0; }
		
		//RICHTEXT = 'RICHTEXT'
		public EnumLiteralDeclaration getRICHTEXTEnumLiteralDeclaration_1() { return cRICHTEXTEnumLiteralDeclaration_1; }
		
		//'RICHTEXT'
		public Keyword getRICHTEXTRICHTEXTKeyword_1_0() { return cRICHTEXTRICHTEXTKeyword_1_0; }
	}
	
	private final ModelElements pModel;
	private final UserFeedbackElements pUserFeedback;
	private final StepElements pStep;
	private final ValidationStepElements pValidationStep;
	private final SubjectElements pSubject;
	private final EStringElements pEString;
	private final FeatureElements pFeature;
	private final ReviewElements pReview;
	private final CommentElements pComment;
	private final GradeTypeElements eGradeType;
	private final ReviewTypeElements eReviewType;
	private final EBooleanElements pEBoolean;
	private final CommentTypeElements eCommentType;
	private final ModerationProcessElements pModerationProcess;
	private final EndElements pEnd;
	private final AutomaticElements pAutomatic;
	private final ManualElements pManual;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public Assign4GrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pUserFeedback = new UserFeedbackElements();
		this.pStep = new StepElements();
		this.pValidationStep = new ValidationStepElements();
		this.pSubject = new SubjectElements();
		this.pEString = new EStringElements();
		this.pFeature = new FeatureElements();
		this.pReview = new ReviewElements();
		this.pComment = new CommentElements();
		this.eGradeType = new GradeTypeElements();
		this.eReviewType = new ReviewTypeElements();
		this.pEBoolean = new EBooleanElements();
		this.eCommentType = new CommentTypeElements();
		this.pModerationProcess = new ModerationProcessElements();
		this.pEnd = new EndElements();
		this.pAutomatic = new AutomaticElements();
		this.pManual = new ManualElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.Assign4".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model returns Model:
	//    'Model' 'name:' name=EString
	//    'Subject' 'name:' subject=Subject;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//UserFeedback returns UserFeedback:
	//    Review | Comment;
	public UserFeedbackElements getUserFeedbackAccess() {
		return pUserFeedback;
	}
	
	public ParserRule getUserFeedbackRule() {
		return getUserFeedbackAccess().getRule();
	}
	
	//Step returns Step:
	//    End | Automatic | Manual;
	public StepElements getStepAccess() {
		return pStep;
	}
	
	public ParserRule getStepRule() {
		return getStepAccess().getRule();
	}
	
	//ValidationStep returns ValidationStep:
	//    Automatic | Manual;
	public ValidationStepElements getValidationStepAccess() {
		return pValidationStep;
	}
	
	public ParserRule getValidationStepRule() {
		return getValidationStepAccess().getRule();
	}
	
	//Subject returns Subject:
	//    name=EString
	//    'Subject' 'has:'
	//        ('Features:' feature+=Feature ( "," feature+=Feature)* )?
	//        'User' 'feedback:' userFeedback+=UserFeedback ( "," userFeedback+=UserFeedback )*;
	public SubjectElements getSubjectAccess() {
		return pSubject;
	}
	
	public ParserRule getSubjectRule() {
		return getSubjectAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//Feature returns Feature:
	//    {Feature}
	//    name=EString;
	public FeatureElements getFeatureAccess() {
		return pFeature;
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}
	
	//Review returns Review:
	//    {Review}
	//    'Review'
	//    name=EString
	//    '{'
	//        ('gradeType' gradeType=GradeType)?
	//        ('reviewType' reviewType=ReviewType)?
	//    '}';
	public ReviewElements getReviewAccess() {
		return pReview;
	}
	
	public ParserRule getReviewRule() {
		return getReviewAccess().getRule();
	}
	
	//Comment returns Comment:
	//    'Comment' 'name:' name=EString
	//        '('reply?='reply'','moderation?='moderation'')'
	//        ('Comment' 'Type:' commentType=CommentType)?
	//        ('Moderation' 'Process' 'Name:' moderationProcess=ModerationProcess)?;
	public CommentElements getCommentAccess() {
		return pComment;
	}
	
	public ParserRule getCommentRule() {
		return getCommentAccess().getRule();
	}
	
	//enum GradeType returns GradeType:
	//                CUSTOM = 'CUSTOM' | STARS = 'STARS';
	public GradeTypeElements getGradeTypeAccess() {
		return eGradeType;
	}
	
	public EnumRule getGradeTypeRule() {
		return getGradeTypeAccess().getRule();
	}
	
	//enum ReviewType returns ReviewType:
	//                ONLYGRADE = 'ONLYGRADE' | ANNOTATED = 'ANNOTATED';
	public ReviewTypeElements getReviewTypeAccess() {
		return eReviewType;
	}
	
	public EnumRule getReviewTypeRule() {
		return getReviewTypeAccess().getRule();
	}
	
	//EBoolean returns ecore::EBoolean:
	//    'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//enum CommentType returns CommentType:
	//                SIMPLE = 'SIMPLE' | RICHTEXT = 'RICHTEXT';
	public CommentTypeElements getCommentTypeAccess() {
		return eCommentType;
	}
	
	public EnumRule getCommentTypeRule() {
		return getCommentTypeAccess().getRule();
	}
	
	//ModerationProcess returns ModerationProcess:
	//    name=EString
	//    'Steps:'
	//        'Start' 'Step:' startStep=[ValidationStep|EString]
	//        ( step+=Step ( step+=Step)* )?;
	public ModerationProcessElements getModerationProcessAccess() {
		return pModerationProcess;
	}
	
	public ParserRule getModerationProcessRule() {
		return getModerationProcessAccess().getRule();
	}
	
	//End returns End:
	//    {End}
	//    'End' 'Step:'
	//    name=EString;
	public EndElements getEndAccess() {
		return pEnd;
	}
	
	public ParserRule getEndRule() {
		return getEndAccess().getRule();
	}
	
	//Automatic returns Automatic:
	//    'Automatic' 'Step' 'Name:' name=EString
	//        ('Method:' method=EString)?
	//        'If' 'approved' 'jump' 'to:' nextApprove=[Step|EString]
	//        'If' 'rejected' 'jump' 'to:' nextReject=[Step|EString];
	public AutomaticElements getAutomaticAccess() {
		return pAutomatic;
	}
	
	public ParserRule getAutomaticRule() {
		return getAutomaticAccess().getRule();
	}
	
	//Manual returns Manual:
	//    'Manual' 'Step' 'Name:' name=EString
	//        'If' 'approved' 'jump' 'to:' nextApprove=[Step|EString]
	//        'If' 'rejected' 'jump' 'to:' nextReject=[Step|EString];
	public ManualElements getManualAccess() {
		return pManual;
	}
	
	public ParserRule getManualRule() {
		return getManualAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
