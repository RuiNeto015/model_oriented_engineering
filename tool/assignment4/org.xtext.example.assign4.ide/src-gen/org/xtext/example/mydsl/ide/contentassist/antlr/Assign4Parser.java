/*
 * generated by Xtext 2.33.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalAssign4Parser;
import org.xtext.example.mydsl.services.Assign4GrammarAccess;

public class Assign4Parser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(Assign4GrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, Assign4GrammarAccess grammarAccess) {
			builder.put(grammarAccess.getUserFeedbackAccess().getAlternatives(), "rule__UserFeedback__Alternatives");
			builder.put(grammarAccess.getStepAccess().getAlternatives(), "rule__Step__Alternatives");
			builder.put(grammarAccess.getValidationStepAccess().getAlternatives(), "rule__ValidationStep__Alternatives");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
			builder.put(grammarAccess.getGradeTypeAccess().getAlternatives(), "rule__GradeType__Alternatives");
			builder.put(grammarAccess.getReviewTypeAccess().getAlternatives(), "rule__ReviewType__Alternatives");
			builder.put(grammarAccess.getCommentTypeAccess().getAlternatives(), "rule__CommentType__Alternatives");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getSubjectAccess().getGroup(), "rule__Subject__Group__0");
			builder.put(grammarAccess.getSubjectAccess().getGroup_3(), "rule__Subject__Group_3__0");
			builder.put(grammarAccess.getSubjectAccess().getGroup_3_2(), "rule__Subject__Group_3_2__0");
			builder.put(grammarAccess.getSubjectAccess().getGroup_7(), "rule__Subject__Group_7__0");
			builder.put(grammarAccess.getFeatureAccess().getGroup(), "rule__Feature__Group__0");
			builder.put(grammarAccess.getReviewAccess().getGroup(), "rule__Review__Group__0");
			builder.put(grammarAccess.getReviewAccess().getGroup_4(), "rule__Review__Group_4__0");
			builder.put(grammarAccess.getReviewAccess().getGroup_5(), "rule__Review__Group_5__0");
			builder.put(grammarAccess.getCommentAccess().getGroup(), "rule__Comment__Group__0");
			builder.put(grammarAccess.getCommentAccess().getGroup_8(), "rule__Comment__Group_8__0");
			builder.put(grammarAccess.getCommentAccess().getGroup_9(), "rule__Comment__Group_9__0");
			builder.put(grammarAccess.getModerationProcessAccess().getGroup(), "rule__ModerationProcess__Group__0");
			builder.put(grammarAccess.getModerationProcessAccess().getGroup_5(), "rule__ModerationProcess__Group_5__0");
			builder.put(grammarAccess.getEndAccess().getGroup(), "rule__End__Group__0");
			builder.put(grammarAccess.getAutomaticAccess().getGroup(), "rule__Automatic__Group__0");
			builder.put(grammarAccess.getAutomaticAccess().getGroup_4(), "rule__Automatic__Group_4__0");
			builder.put(grammarAccess.getManualAccess().getGroup(), "rule__Manual__Group__0");
			builder.put(grammarAccess.getModelAccess().getNameAssignment_2(), "rule__Model__NameAssignment_2");
			builder.put(grammarAccess.getModelAccess().getSubjectAssignment_5(), "rule__Model__SubjectAssignment_5");
			builder.put(grammarAccess.getSubjectAccess().getNameAssignment_0(), "rule__Subject__NameAssignment_0");
			builder.put(grammarAccess.getSubjectAccess().getFeatureAssignment_3_1(), "rule__Subject__FeatureAssignment_3_1");
			builder.put(grammarAccess.getSubjectAccess().getFeatureAssignment_3_2_1(), "rule__Subject__FeatureAssignment_3_2_1");
			builder.put(grammarAccess.getSubjectAccess().getUserFeedbackAssignment_6(), "rule__Subject__UserFeedbackAssignment_6");
			builder.put(grammarAccess.getSubjectAccess().getUserFeedbackAssignment_7_1(), "rule__Subject__UserFeedbackAssignment_7_1");
			builder.put(grammarAccess.getFeatureAccess().getNameAssignment_1(), "rule__Feature__NameAssignment_1");
			builder.put(grammarAccess.getReviewAccess().getNameAssignment_2(), "rule__Review__NameAssignment_2");
			builder.put(grammarAccess.getReviewAccess().getGradeTypeAssignment_4_1(), "rule__Review__GradeTypeAssignment_4_1");
			builder.put(grammarAccess.getReviewAccess().getReviewTypeAssignment_5_1(), "rule__Review__ReviewTypeAssignment_5_1");
			builder.put(grammarAccess.getCommentAccess().getNameAssignment_2(), "rule__Comment__NameAssignment_2");
			builder.put(grammarAccess.getCommentAccess().getReplyAssignment_4(), "rule__Comment__ReplyAssignment_4");
			builder.put(grammarAccess.getCommentAccess().getModerationAssignment_6(), "rule__Comment__ModerationAssignment_6");
			builder.put(grammarAccess.getCommentAccess().getCommentTypeAssignment_8_2(), "rule__Comment__CommentTypeAssignment_8_2");
			builder.put(grammarAccess.getCommentAccess().getModerationProcessAssignment_9_3(), "rule__Comment__ModerationProcessAssignment_9_3");
			builder.put(grammarAccess.getModerationProcessAccess().getNameAssignment_0(), "rule__ModerationProcess__NameAssignment_0");
			builder.put(grammarAccess.getModerationProcessAccess().getStartStepAssignment_4(), "rule__ModerationProcess__StartStepAssignment_4");
			builder.put(grammarAccess.getModerationProcessAccess().getStepAssignment_5_0(), "rule__ModerationProcess__StepAssignment_5_0");
			builder.put(grammarAccess.getModerationProcessAccess().getStepAssignment_5_1(), "rule__ModerationProcess__StepAssignment_5_1");
			builder.put(grammarAccess.getEndAccess().getNameAssignment_3(), "rule__End__NameAssignment_3");
			builder.put(grammarAccess.getAutomaticAccess().getNameAssignment_3(), "rule__Automatic__NameAssignment_3");
			builder.put(grammarAccess.getAutomaticAccess().getMethodAssignment_4_1(), "rule__Automatic__MethodAssignment_4_1");
			builder.put(grammarAccess.getAutomaticAccess().getNextApproveAssignment_9(), "rule__Automatic__NextApproveAssignment_9");
			builder.put(grammarAccess.getAutomaticAccess().getNextRejectAssignment_14(), "rule__Automatic__NextRejectAssignment_14");
			builder.put(grammarAccess.getManualAccess().getNameAssignment_3(), "rule__Manual__NameAssignment_3");
			builder.put(grammarAccess.getManualAccess().getNextApproveAssignment_8(), "rule__Manual__NextApproveAssignment_8");
			builder.put(grammarAccess.getManualAccess().getNextRejectAssignment_13(), "rule__Manual__NextRejectAssignment_13");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private Assign4GrammarAccess grammarAccess;

	@Override
	protected InternalAssign4Parser createParser() {
		InternalAssign4Parser result = new InternalAssign4Parser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public Assign4GrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(Assign4GrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
